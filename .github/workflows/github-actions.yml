
name: Test

on:
  push:
    branches:
      - master


jobs:
  test:
    runs-on: windows-latest
    permissions: write-all
    strategy:
      matrix:
        python-version: ["3.9"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Create and activate venv
      run: |
        python -m venv tests
        tests\Scripts\activate
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pipdeptree -fl
    - name: Run tests
      run: |
        pytest --cov=./ --junitxml=pytest.xml --capture=tee-sys --cov-report=term-missing:skip-covered tests/ | tee pytest-coverage.txt
    - name: Build with pyinstaller
      run: |
        pyinstaller  tests/test_mvpy_rest_server.py
    - name: List files in the repository
      run: |
        ls ${{ github.workspace }}
    - run: echo "This job's status is ${{ job.status }}."

    - name: Create Release
      id: create_new_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        body: |
          Release
        draft: false
        prerelease: false

    - name: coverage
      uses: MishaKav/pytest-coverage-comment@main
      with:
        pytest-coverage-path: pytest.txt
        junitxml-path: pytest.xml

    - name: Check the output coverage
      id: output
      run: |
        echo "Coverage Percantage - ${{ steps.coverageComment.outputs.coverage }}"
        echo "Coverage Color - ${{ steps.coverageComment.outputs.color }}"
        echo "Coverage Html - ${{ steps.coverageComment.outputs.coverageHtml }}"
        echo "Coverage Warnings - ${{ steps.coverageComment.outputs.warnings }}"
        echo "Coverage Errors - ${{ steps.coverageComment.outputs.errors }}"
        echo "Coverage Failures - ${{ steps.coverageComment.outputs.failures }}"
        echo "Coverage Skipped - ${{ steps.coverageComment.outputs.skipped }}"
        echo "Coverage Tests - ${{ steps.coverageComment.outputs.tests }}"
        echo "Coverage Time - ${{ steps.coverageComment.outputs.time }}"
        echo "Not Success Test Info - ${{ steps.coverageComment.outputs.notSuccessTestInfo }}"


#---
#
#name: Python package
#
#on: [push]
#
#jobs:
#  build:
#
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        python-version: ["3.9"]
#
#    steps:
#      - uses: actions/checkout@v3
#      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
#      - run: echo "The workflow is now ready to test your code on the runner."
#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v4
#        with:
#          python-version: ${{ matrix.python-version }}
#      - name: Create and activate venv
#        run: |
#          python -m venv tests
#          source tests/bin/activate
#          cat tests/bin/activate
#      - name: Install dependencies
#        run: |
#            python -m pip install --upgrade pip
#            pip install -r requirements.txt
#            pip install -e .
#      - name: Lint with flake8
#        run: |
#          # stop the build if there are Python syntax errors or undefined names
#          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
#      - name: Test the code with pytest
#      -  run: |
#          python -m pytest --import-mode=append tests/
#      - name: Build with pyinstaller
#      - run: |
#          pyinstaller  tests/test_mvpy_rest_server.py
#      - name: List files in the repository
#      -  run: |
#          ls ${{ github.workspace }}
#      - run: echo "This job's status is ${{ job.status }}."