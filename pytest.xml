<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="8" skipped="0" tests="12" time="1.817" timestamp="2022-12-15T01:35:28.044208" hostname="DESKTOP-9G6E7ON"><testcase classname="tests.test_mvpy_rest_server" name="test_nuc_rest_runner_init" time="0.077" /><testcase classname="tests.test_mvpy_rest_server" name="test_nuc_rest_runner_parse" time="0.035"><failure message="assert []">nuc_rest_runner = &lt;mvpy_rest_server.NucRestRunner object at 0x000002A436637E50&gt;

    def test_nuc_rest_runner_parse(nuc_rest_runner):
        # Test XML Parser
        commands = None
        commands = nuc_rest_runner.load_graph_from_file(str(Path(r"./tests/devices_only.xml")), {"PORT": "5555"})
        assert(Path(r"./tests/devices_only_from_xml.txt").exists())
        assert(commands)
    
        # Test JSON Parser
        commands = None
        commands = nuc_rest_runner.load_graph_from_file(str(Path(r"./tests/lord_rtmesh.json")), {"PORT": "5555", "LORDIP": "192.168.77.112", "NUM": "1"})
        assert(Path(r"./tests/lord_rtmesh_from_json.txt").exists())
        assert(commands)
    
        # Test TXT Parser
        commands = None
        commands = nuc_rest_runner.load_graph_from_file(str(Path(r"./tests/TX_MV_DM.txt")), {"CONF": str(Path(r"c:\nuc\ring_it\Configs"))})
        assert(Path(r"./tests/TX_MV_DM_from_txt.txt").exists())
&gt;       assert(commands)
E       assert []

tests\test_mvpy_rest_server.py:63: AssertionError</failure></testcase><testcase classname="tests.test_mvpy_rest_server" name="test_nuc_rest_runner_run" time="0.081"><failure message="ValueError: ('Failed to Play MVX graph due to exception', ValueError('Failed to retrieve MvxGraphCore last error, due to exception:', OSError('exception: access violation writing 0x0000000000002000')))">self = &lt;MvxGraph.MvxGraphCoreWrapper object at 0x000002A436636740&gt;, max_ret_buff_size = 8192

    def get_last_error(self, max_ret_buff_size: int = _max_return_buff_len) -&gt; str:
        try:
            ctypes_wrapper = self._library.GetLastGraphError
            ctypes_wrapper.restype = ctypes.c_int
            ctypes_wrapper.argtypes = [ctypes.c_int, ctypes.c_char_p]
            ret_str = ctypes.create_string_buffer(max_ret_buff_size)
    
&gt;           rc = ctypes_wrapper(max_ret_buff_size, ret_str)
E           OSError: exception: access violation writing 0x0000000000002000

MvxGraph.py:112: OSError

During handling of the above exception, another exception occurred:

self = &lt;MvxGraph.MvxGraphCoreWrapper object at 0x000002A436636740&gt;, playback_mode = 3

    def play_graph(self, playback_mode: GraphPlaybackMode):
        try:
            ctypes_wrapper = self._library.PlayGraph
            ctypes_wrapper.restype = ctypes.c_int
            ctypes_wrapper.argtypes = [ctypes.c_int]
    
            rc = ctypes_wrapper(playback_mode)
    
            if rc == 1:
                print('Graph play sent')
            else:
&gt;               raise ValueError(self.get_last_error())

MvxGraph.py:307: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;MvxGraph.MvxGraphCoreWrapper object at 0x000002A436636740&gt;, max_ret_buff_size = 8192

    def get_last_error(self, max_ret_buff_size: int = _max_return_buff_len) -&gt; str:
        try:
            ctypes_wrapper = self._library.GetLastGraphError
            ctypes_wrapper.restype = ctypes.c_int
            ctypes_wrapper.argtypes = [ctypes.c_int, ctypes.c_char_p]
            ret_str = ctypes.create_string_buffer(max_ret_buff_size)
    
            rc = ctypes_wrapper(max_ret_buff_size, ret_str)
    
            if rc == 1:
                return str(ret_str.value.decode('ascii'))
            else:
                raise ValueError('rc=', rc)
        except Exception as e:
&gt;           raise ValueError('Failed to retrieve MvxGraphCore last error, due to exception:', e)
E           ValueError: ('Failed to retrieve MvxGraphCore last error, due to exception:', OSError('exception: access violation writing 0x0000000000002000'))

MvxGraph.py:119: ValueError

During handling of the above exception, another exception occurred:

nuc_rest_runner = &lt;mvpy_rest_server.NucRestRunner object at 0x000002A4366372B0&gt;

    def test_nuc_rest_runner_run(nuc_rest_runner):
        nuc_rest_runner.r_destroy_graph()
        assert(nuc_rest_runner.get_state() == MvxGraph.GraphState.NOT_BUILT)
    
        nuc_rest_runner.graph_commands = nuc_rest_runner.load_graph_from_file(str(Path(r"./tests/read_decomp_write.xml")), {"INPUT": f"{str(Path.cwd())}\\tests\\morning.mvx"})
        assert(nuc_rest_runner.graph_commands)
    
        nuc_rest_runner.invoke_graph_commands(nuc_rest_runner.graph_commands)
        nuc_rest_runner._graph_core.build_graph()
    
&gt;       nuc_rest_runner._graph_core.play_graph(int(nuc_rest_runner.play_mode))

tests\test_mvpy_rest_server.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;MvxGraph.MvxGraphCoreWrapper object at 0x000002A436636740&gt;, playback_mode = 3

    def play_graph(self, playback_mode: GraphPlaybackMode):
        try:
            ctypes_wrapper = self._library.PlayGraph
            ctypes_wrapper.restype = ctypes.c_int
            ctypes_wrapper.argtypes = [ctypes.c_int]
    
            rc = ctypes_wrapper(playback_mode)
    
            if rc == 1:
                print('Graph play sent')
            else:
                raise ValueError(self.get_last_error())
        except Exception as e:
&gt;           raise ValueError('Failed to Play MVX graph due to exception', e)
E           ValueError: ('Failed to Play MVX graph due to exception', ValueError('Failed to retrieve MvxGraphCore last error, due to exception:', OSError('exception: access violation writing 0x0000000000002000')))

MvxGraph.py:309: ValueError</failure></testcase><testcase classname="tests.test_mvpy_rest_server" name="test_nuc_rest_runner_build" time="0.026"><failure message="AssertionError: assert &lt;GraphState.STOPPED: 4&gt; == &lt;GraphState.NOT_BUILT: 0&gt;&#10; +  where &lt;GraphState.STOPPED: 4&gt; = &lt;bound method NucRestRunner.get_state of &lt;mvpy_rest_server.NucRestRunner object at 0x000002A43666B550&gt;&gt;()&#10; +    where &lt;bound method NucRestRunner.get_state of &lt;mvpy_rest_server.NucRestRunner object at 0x000002A43666B550&gt;&gt; = &lt;mvpy_rest_server.NucRestRunner object at 0x000002A43666B550&gt;.get_state&#10; +  and   &lt;GraphState.NOT_BUILT: 0&gt; = &lt;enum 'GraphState'&gt;.NOT_BUILT&#10; +    where &lt;enum 'GraphState'&gt; = MvxGraph.GraphState">nuc_rest_runner = &lt;mvpy_rest_server.NucRestRunner object at 0x000002A43666B550&gt;

    def test_nuc_rest_runner_build(nuc_rest_runner):
&gt;       assert(nuc_rest_runner.get_state() == MvxGraph.GraphState.NOT_BUILT)
E       AssertionError: assert &lt;GraphState.STOPPED: 4&gt; == &lt;GraphState.NOT_BUILT: 0&gt;
E        +  where &lt;GraphState.STOPPED: 4&gt; = &lt;bound method NucRestRunner.get_state of &lt;mvpy_rest_server.NucRestRunner object at 0x000002A43666B550&gt;&gt;()
E        +    where &lt;bound method NucRestRunner.get_state of &lt;mvpy_rest_server.NucRestRunner object at 0x000002A43666B550&gt;&gt; = &lt;mvpy_rest_server.NucRestRunner object at 0x000002A43666B550&gt;.get_state
E        +  and   &lt;GraphState.NOT_BUILT: 0&gt; = &lt;enum 'GraphState'&gt;.NOT_BUILT
E        +    where &lt;enum 'GraphState'&gt; = MvxGraph.GraphState

tests\test_mvpy_rest_server.py:84: AssertionError</failure></testcase><testcase classname="tests.test_mvpy_rest_server" name="test_nuc_rest_runner_stop" time="0.093"><failure message="ValueError: ('Failed to Play MVX graph due to exception', ValueError('Failed to retrieve MvxGraphCore last error, due to exception:', OSError('exception: access violation writing 0x0000000000002000')))">self = &lt;MvxGraph.MvxGraphCoreWrapper object at 0x000002A436F26470&gt;, max_ret_buff_size = 8192

    def get_last_error(self, max_ret_buff_size: int = _max_return_buff_len) -&gt; str:
        try:
            ctypes_wrapper = self._library.GetLastGraphError
            ctypes_wrapper.restype = ctypes.c_int
            ctypes_wrapper.argtypes = [ctypes.c_int, ctypes.c_char_p]
            ret_str = ctypes.create_string_buffer(max_ret_buff_size)
    
&gt;           rc = ctypes_wrapper(max_ret_buff_size, ret_str)
E           OSError: exception: access violation writing 0x0000000000002000

MvxGraph.py:112: OSError

During handling of the above exception, another exception occurred:

self = &lt;MvxGraph.MvxGraphCoreWrapper object at 0x000002A436F26470&gt;, playback_mode = 3

    def play_graph(self, playback_mode: GraphPlaybackMode):
        try:
            ctypes_wrapper = self._library.PlayGraph
            ctypes_wrapper.restype = ctypes.c_int
            ctypes_wrapper.argtypes = [ctypes.c_int]
    
            rc = ctypes_wrapper(playback_mode)
    
            if rc == 1:
                print('Graph play sent')
            else:
&gt;               raise ValueError(self.get_last_error())

MvxGraph.py:307: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;MvxGraph.MvxGraphCoreWrapper object at 0x000002A436F26470&gt;, max_ret_buff_size = 8192

    def get_last_error(self, max_ret_buff_size: int = _max_return_buff_len) -&gt; str:
        try:
            ctypes_wrapper = self._library.GetLastGraphError
            ctypes_wrapper.restype = ctypes.c_int
            ctypes_wrapper.argtypes = [ctypes.c_int, ctypes.c_char_p]
            ret_str = ctypes.create_string_buffer(max_ret_buff_size)
    
            rc = ctypes_wrapper(max_ret_buff_size, ret_str)
    
            if rc == 1:
                return str(ret_str.value.decode('ascii'))
            else:
                raise ValueError('rc=', rc)
        except Exception as e:
&gt;           raise ValueError('Failed to retrieve MvxGraphCore last error, due to exception:', e)
E           ValueError: ('Failed to retrieve MvxGraphCore last error, due to exception:', OSError('exception: access violation writing 0x0000000000002000'))

MvxGraph.py:119: ValueError

During handling of the above exception, another exception occurred:

nuc_rest_runner = &lt;mvpy_rest_server.NucRestRunner object at 0x000002A436F26830&gt;

    def test_nuc_rest_runner_stop(nuc_rest_runner):
        nuc_rest_runner.r_destroy_graph()
        assert(nuc_rest_runner.get_state() == MvxGraph.GraphState.NOT_BUILT)
    
        nuc_rest_runner.graph_commands = nuc_rest_runner.load_graph_from_file(str(Path(r"./tests/read_decomp_write.xml")), {"INPUT": f"{str(Path.cwd())}\\tests\\morning.mvx"})
        assert(nuc_rest_runner.graph_commands)
    
        nuc_rest_runner.invoke_graph_commands(nuc_rest_runner.graph_commands)
        nuc_rest_runner._graph_core.build_graph()
    
&gt;       nuc_rest_runner._graph_core.play_graph(int(nuc_rest_runner.play_mode))

tests\test_mvpy_rest_server.py:112: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;MvxGraph.MvxGraphCoreWrapper object at 0x000002A436F26470&gt;, playback_mode = 3

    def play_graph(self, playback_mode: GraphPlaybackMode):
        try:
            ctypes_wrapper = self._library.PlayGraph
            ctypes_wrapper.restype = ctypes.c_int
            ctypes_wrapper.argtypes = [ctypes.c_int]
    
            rc = ctypes_wrapper(playback_mode)
    
            if rc == 1:
                print('Graph play sent')
            else:
                raise ValueError(self.get_last_error())
        except Exception as e:
&gt;           raise ValueError('Failed to Play MVX graph due to exception', e)
E           ValueError: ('Failed to Play MVX graph due to exception', ValueError('Failed to retrieve MvxGraphCore last error, due to exception:', OSError('exception: access violation writing 0x0000000000002000')))

MvxGraph.py:309: ValueError</failure></testcase><testcase classname="tests.test_mvpy_rest_server" name="test_nuc_rest_runner_terminate" time="0.114"><failure message="ValueError: ('Failed to Play MVX graph due to exception', ValueError('Failed to retrieve MvxGraphCore last error, due to exception:', OSError('exception: access violation writing 0x0000000000002000')))">self = &lt;MvxGraph.MvxGraphCoreWrapper object at 0x000002A4366AB460&gt;, max_ret_buff_size = 8192

    def get_last_error(self, max_ret_buff_size: int = _max_return_buff_len) -&gt; str:
        try:
            ctypes_wrapper = self._library.GetLastGraphError
            ctypes_wrapper.restype = ctypes.c_int
            ctypes_wrapper.argtypes = [ctypes.c_int, ctypes.c_char_p]
            ret_str = ctypes.create_string_buffer(max_ret_buff_size)
    
&gt;           rc = ctypes_wrapper(max_ret_buff_size, ret_str)
E           OSError: exception: access violation writing 0x0000000000002000

MvxGraph.py:112: OSError

During handling of the above exception, another exception occurred:

self = &lt;MvxGraph.MvxGraphCoreWrapper object at 0x000002A4366AB460&gt;, playback_mode = 3

    def play_graph(self, playback_mode: GraphPlaybackMode):
        try:
            ctypes_wrapper = self._library.PlayGraph
            ctypes_wrapper.restype = ctypes.c_int
            ctypes_wrapper.argtypes = [ctypes.c_int]
    
            rc = ctypes_wrapper(playback_mode)
    
            if rc == 1:
                print('Graph play sent')
            else:
&gt;               raise ValueError(self.get_last_error())

MvxGraph.py:307: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;MvxGraph.MvxGraphCoreWrapper object at 0x000002A4366AB460&gt;, max_ret_buff_size = 8192

    def get_last_error(self, max_ret_buff_size: int = _max_return_buff_len) -&gt; str:
        try:
            ctypes_wrapper = self._library.GetLastGraphError
            ctypes_wrapper.restype = ctypes.c_int
            ctypes_wrapper.argtypes = [ctypes.c_int, ctypes.c_char_p]
            ret_str = ctypes.create_string_buffer(max_ret_buff_size)
    
            rc = ctypes_wrapper(max_ret_buff_size, ret_str)
    
            if rc == 1:
                return str(ret_str.value.decode('ascii'))
            else:
                raise ValueError('rc=', rc)
        except Exception as e:
&gt;           raise ValueError('Failed to retrieve MvxGraphCore last error, due to exception:', e)
E           ValueError: ('Failed to retrieve MvxGraphCore last error, due to exception:', OSError('exception: access violation writing 0x0000000000002000'))

MvxGraph.py:119: ValueError

During handling of the above exception, another exception occurred:

nuc_rest_runner = &lt;mvpy_rest_server.NucRestRunner object at 0x000002A4366A9060&gt;

    def test_nuc_rest_runner_terminate(nuc_rest_runner):
        nuc_rest_runner.r_destroy_graph()
        assert(nuc_rest_runner.get_state() == MvxGraph.GraphState.NOT_BUILT)
    
        nuc_rest_runner.graph_commands = nuc_rest_runner.load_graph_from_file(str(Path(r"./tests/read_decomp_write.xml")), {"INPUT": f"{str(Path.cwd())}\\tests\\morning.mvx"})
        assert(nuc_rest_runner.graph_commands)
    
        nuc_rest_runner.invoke_graph_commands(nuc_rest_runner.graph_commands)
        nuc_rest_runner._graph_core.build_graph()
    
&gt;       nuc_rest_runner._graph_core.play_graph(int(nuc_rest_runner.play_mode))

tests\test_mvpy_rest_server.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;MvxGraph.MvxGraphCoreWrapper object at 0x000002A4366AB460&gt;, playback_mode = 3

    def play_graph(self, playback_mode: GraphPlaybackMode):
        try:
            ctypes_wrapper = self._library.PlayGraph
            ctypes_wrapper.restype = ctypes.c_int
            ctypes_wrapper.argtypes = [ctypes.c_int]
    
            rc = ctypes_wrapper(playback_mode)
    
            if rc == 1:
                print('Graph play sent')
            else:
                raise ValueError(self.get_last_error())
        except Exception as e:
&gt;           raise ValueError('Failed to Play MVX graph due to exception', e)
E           ValueError: ('Failed to Play MVX graph due to exception', ValueError('Failed to retrieve MvxGraphCore last error, due to exception:', OSError('exception: access violation writing 0x0000000000002000')))

MvxGraph.py:309: ValueError</failure></testcase><testcase classname="tests.test_mvpy_rest_server" name="test_nuc_rest_runner_get_filter_param" time="0.090"><failure message="ValueError: ('Failed to Play MVX graph due to exception', ValueError('Failed to retrieve MvxGraphCore last error, due to exception:', OSError('exception: access violation writing 0x0000000000002000')))">self = &lt;MvxGraph.MvxGraphCoreWrapper object at 0x000002A436F53E80&gt;, max_ret_buff_size = 8192

    def get_last_error(self, max_ret_buff_size: int = _max_return_buff_len) -&gt; str:
        try:
            ctypes_wrapper = self._library.GetLastGraphError
            ctypes_wrapper.restype = ctypes.c_int
            ctypes_wrapper.argtypes = [ctypes.c_int, ctypes.c_char_p]
            ret_str = ctypes.create_string_buffer(max_ret_buff_size)
    
&gt;           rc = ctypes_wrapper(max_ret_buff_size, ret_str)
E           OSError: exception: access violation writing 0x0000000000002000

MvxGraph.py:112: OSError

During handling of the above exception, another exception occurred:

self = &lt;MvxGraph.MvxGraphCoreWrapper object at 0x000002A436F53E80&gt;, playback_mode = 3

    def play_graph(self, playback_mode: GraphPlaybackMode):
        try:
            ctypes_wrapper = self._library.PlayGraph
            ctypes_wrapper.restype = ctypes.c_int
            ctypes_wrapper.argtypes = [ctypes.c_int]
    
            rc = ctypes_wrapper(playback_mode)
    
            if rc == 1:
                print('Graph play sent')
            else:
&gt;               raise ValueError(self.get_last_error())

MvxGraph.py:307: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;MvxGraph.MvxGraphCoreWrapper object at 0x000002A436F53E80&gt;, max_ret_buff_size = 8192

    def get_last_error(self, max_ret_buff_size: int = _max_return_buff_len) -&gt; str:
        try:
            ctypes_wrapper = self._library.GetLastGraphError
            ctypes_wrapper.restype = ctypes.c_int
            ctypes_wrapper.argtypes = [ctypes.c_int, ctypes.c_char_p]
            ret_str = ctypes.create_string_buffer(max_ret_buff_size)
    
            rc = ctypes_wrapper(max_ret_buff_size, ret_str)
    
            if rc == 1:
                return str(ret_str.value.decode('ascii'))
            else:
                raise ValueError('rc=', rc)
        except Exception as e:
&gt;           raise ValueError('Failed to retrieve MvxGraphCore last error, due to exception:', e)
E           ValueError: ('Failed to retrieve MvxGraphCore last error, due to exception:', OSError('exception: access violation writing 0x0000000000002000'))

MvxGraph.py:119: ValueError

During handling of the above exception, another exception occurred:

nuc_rest_runner = &lt;mvpy_rest_server.NucRestRunner object at 0x000002A436F52FE0&gt;, client = &lt;FlaskClient &lt;Flask 'mvpy_rest_server'&gt;&gt;

    def test_nuc_rest_runner_get_filter_param(nuc_rest_runner, client):
        nuc_rest_runner.r_destroy_graph()
        assert(nuc_rest_runner.get_state() == MvxGraph.GraphState.NOT_BUILT)
    
        nuc_rest_runner.graph_commands = nuc_rest_runner.load_graph_from_file(str(Path(r"./tests/read_decomp_write.xml")), {"INPUT": f"{str(Path.cwd())}\\tests\\morning.mvx"})
        nuc_rest_runner.invoke_graph_commands(nuc_rest_runner.graph_commands)
        nuc_rest_runner._graph_core.build_graph()
&gt;       nuc_rest_runner._graph_core.play_graph(int(nuc_rest_runner.play_mode))

tests\test_mvpy_rest_server.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;MvxGraph.MvxGraphCoreWrapper object at 0x000002A436F53E80&gt;, playback_mode = 3

    def play_graph(self, playback_mode: GraphPlaybackMode):
        try:
            ctypes_wrapper = self._library.PlayGraph
            ctypes_wrapper.restype = ctypes.c_int
            ctypes_wrapper.argtypes = [ctypes.c_int]
    
            rc = ctypes_wrapper(playback_mode)
    
            if rc == 1:
                print('Graph play sent')
            else:
                raise ValueError(self.get_last_error())
        except Exception as e:
&gt;           raise ValueError('Failed to Play MVX graph due to exception', e)
E           ValueError: ('Failed to Play MVX graph due to exception', ValueError('Failed to retrieve MvxGraphCore last error, due to exception:', OSError('exception: access violation writing 0x0000000000002000')))

MvxGraph.py:309: ValueError</failure></testcase><testcase classname="tests.test_mvpy_rest_server" name="test_nuc_rest_runner_set_filter_param" time="0.072" /><testcase classname="tests.test_mvpy_rest_server" name="test_nuc_rest_runner_set_params" time="0.130" /><testcase classname="tests.test_mvpy_rest_server" name="test_nuc_rest_runner_get_play_mode" time="0.082"><failure message="ValueError: ('Failed to Play MVX graph due to exception', ValueError('Failed to retrieve MvxGraphCore last error, due to exception:', OSError('exception: access violation writing 0x0000000000002000')))">self = &lt;MvxGraph.MvxGraphCoreWrapper object at 0x000002A43706E1D0&gt;, max_ret_buff_size = 8192

    def get_last_error(self, max_ret_buff_size: int = _max_return_buff_len) -&gt; str:
        try:
            ctypes_wrapper = self._library.GetLastGraphError
            ctypes_wrapper.restype = ctypes.c_int
            ctypes_wrapper.argtypes = [ctypes.c_int, ctypes.c_char_p]
            ret_str = ctypes.create_string_buffer(max_ret_buff_size)
    
&gt;           rc = ctypes_wrapper(max_ret_buff_size, ret_str)
E           OSError: exception: access violation writing 0x0000000000002000

MvxGraph.py:112: OSError

During handling of the above exception, another exception occurred:

self = &lt;MvxGraph.MvxGraphCoreWrapper object at 0x000002A43706E1D0&gt;, playback_mode = 3

    def play_graph(self, playback_mode: GraphPlaybackMode):
        try:
            ctypes_wrapper = self._library.PlayGraph
            ctypes_wrapper.restype = ctypes.c_int
            ctypes_wrapper.argtypes = [ctypes.c_int]
    
            rc = ctypes_wrapper(playback_mode)
    
            if rc == 1:
                print('Graph play sent')
            else:
&gt;               raise ValueError(self.get_last_error())

MvxGraph.py:307: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;MvxGraph.MvxGraphCoreWrapper object at 0x000002A43706E1D0&gt;, max_ret_buff_size = 8192

    def get_last_error(self, max_ret_buff_size: int = _max_return_buff_len) -&gt; str:
        try:
            ctypes_wrapper = self._library.GetLastGraphError
            ctypes_wrapper.restype = ctypes.c_int
            ctypes_wrapper.argtypes = [ctypes.c_int, ctypes.c_char_p]
            ret_str = ctypes.create_string_buffer(max_ret_buff_size)
    
            rc = ctypes_wrapper(max_ret_buff_size, ret_str)
    
            if rc == 1:
                return str(ret_str.value.decode('ascii'))
            else:
                raise ValueError('rc=', rc)
        except Exception as e:
&gt;           raise ValueError('Failed to retrieve MvxGraphCore last error, due to exception:', e)
E           ValueError: ('Failed to retrieve MvxGraphCore last error, due to exception:', OSError('exception: access violation writing 0x0000000000002000'))

MvxGraph.py:119: ValueError

During handling of the above exception, another exception occurred:

nuc_rest_runner = &lt;mvpy_rest_server.NucRestRunner object at 0x000002A43706D510&gt;, client = &lt;FlaskClient &lt;Flask 'mvpy_rest_server'&gt;&gt;

    def test_nuc_rest_runner_get_play_mode(nuc_rest_runner, client):
        nuc_rest_runner.r_destroy_graph()
        assert(nuc_rest_runner.get_state() == MvxGraph.GraphState.NOT_BUILT)
    
        nuc_rest_runner.graph_commands = nuc_rest_runner.load_graph_from_file(str(Path(r"./tests/read_decomp_write.xml")), {"INPUT": f"{str(Path.cwd())}\\tests\\morning.mvx"})
        nuc_rest_runner.invoke_graph_commands(nuc_rest_runner.graph_commands)
        nuc_rest_runner._graph_core.build_graph()
    
&gt;       nuc_rest_runner._graph_core.play_graph(int(nuc_rest_runner.play_mode))

tests\test_mvpy_rest_server.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;MvxGraph.MvxGraphCoreWrapper object at 0x000002A43706E1D0&gt;, playback_mode = 3

    def play_graph(self, playback_mode: GraphPlaybackMode):
        try:
            ctypes_wrapper = self._library.PlayGraph
            ctypes_wrapper.restype = ctypes.c_int
            ctypes_wrapper.argtypes = [ctypes.c_int]
    
            rc = ctypes_wrapper(playback_mode)
    
            if rc == 1:
                print('Graph play sent')
            else:
                raise ValueError(self.get_last_error())
        except Exception as e:
&gt;           raise ValueError('Failed to Play MVX graph due to exception', e)
E           ValueError: ('Failed to Play MVX graph due to exception', ValueError('Failed to retrieve MvxGraphCore last error, due to exception:', OSError('exception: access violation writing 0x0000000000002000')))

MvxGraph.py:309: ValueError</failure></testcase><testcase classname="tests.test_mvpy_rest_server" name="test_nuc_rest_runner_set_play_mode" time="0.065" /><testcase classname="tests.test_mvpy_rest_server" name="test_nuc_rest_runner_get_filters" time="0.067"><failure message="assert b'mvx2filereader' in b'{&quot;#autodecompressor_1&quot;:1}\n'&#10; +  where b'{&quot;#autodecompressor_1&quot;:1}\n' = &lt;WrapperTestResponse 26 bytes [200 OK]&gt;.data">nuc_rest_runner = &lt;mvpy_rest_server.NucRestRunner object at 0x000002A437112A40&gt;, client = &lt;FlaskClient &lt;Flask 'mvpy_rest_server'&gt;&gt;

    def test_nuc_rest_runner_get_filters(nuc_rest_runner, client):
        nuc_rest_runner.r_destroy_graph()
        assert(nuc_rest_runner.get_state() == MvxGraph.GraphState.NOT_BUILT)
    
        nuc_rest_runner.graph_commands = nuc_rest_runner.load_graph_from_file(str(Path(r"./tests/read_decomp_write.xml")), {"INPUT": f"{str(Path.cwd())}\\tests\\morning.mvx"})
        nuc_rest_runner.invoke_graph_commands(nuc_rest_runner.graph_commands)
        nuc_rest_runner._graph_core.build_graph()
    
        response = client.get("/graph/get_filters")
    
&gt;       assert b"mvx2filereader" in response.data
E       assert b'mvx2filereader' in b'{"#autodecompressor_1":1}\n'
E        +  where b'{"#autodecompressor_1":1}\n' = &lt;WrapperTestResponse 26 bytes [200 OK]&gt;.data

tests\test_mvpy_rest_server.py:218: AssertionError</failure></testcase></testsuite></testsuites>